import { VercelTemplateService } from './vercelTemplateService';

export interface StaticDeploymentResult {
  url: string;
  deploymentId: string;
  htmlContent: string;
  status: 'ready' | 'building' | 'error';
}

export class StaticDeploymentService {
  static async createPortfolioDeployment(profileData: any): Promise<StaticDeploymentResult> {
    try {
      const projectName = `portfolio-${profileData.fullName?.toLowerCase().replace(/\s+/g, '-') || 'user'}-${Date.now()}`;
      
      console.log('Creating static portfolio deployment:', projectName);
      
      // Generate HTML content
      const htmlContent = VercelTemplateService.generatePortfolioHTML(profileData);
      
      // Create a deployment ID
      const deploymentId = `deploy_${Date.now()}`;
      
      // Generate a Vercel-style URL (this would be the actual URL after manual deployment)
      const vercelUrl = `https://${projectName}.vercel.app`;
      
      // For now, we'll also provide a local URL for immediate testing
      const localUrl = `${window.location.origin}/portfolio/${deploymentId}`;
      
      console.log('Static deployment created:', {
        vercelUrl,
        localUrl,
        deploymentId
      });
      
      return {
        url: vercelUrl, // This is the URL you'll get after manual deployment
        deploymentId,
        htmlContent,
        status: 'ready'
      };

    } catch (error) {
      console.error('Error creating static deployment:', error);
      throw new Error('Failed to create static deployment');
    }
  }

  static generateDeploymentInstructions(profileData: any, htmlContent: string): string {
    const projectName = `portfolio-${profileData.fullName?.toLowerCase().replace(/\s+/g, '-') || 'user'}-${Date.now()}`;
    
    return `
# Portfolio Deployment Instructions

## Your Portfolio is Ready! ðŸš€

**Project Name:** ${projectName}
**Generated URL:** https://${projectName}.vercel.app

## How to Deploy to Vercel:

### Option 1: Vercel CLI (Recommended)
1. Install Vercel CLI: \`npm i -g vercel\`
2. Create a new directory: \`mkdir ${projectName}\`
3. Save the HTML content as \`index.html\` in that directory
4. Run: \`cd ${projectName} && vercel\`
5. Follow the prompts to deploy

### Option 2: Vercel Dashboard
1. Go to https://vercel.com/dashboard
2. Click "New Project"
3. Import a Git repository or drag & drop the HTML file
4. Deploy!

### Option 3: GitHub + Vercel
1. Create a new GitHub repository
2. Add the HTML content as \`index.html\`
3. Connect the repository to Vercel
4. Deploy automatically

## Your HTML Content:
The generated HTML file contains your complete portfolio with:
- Professional design
- Responsive layout
- SEO optimization
- Contact information
- Skills, experience, education, and projects

## Custom Domain:
After deployment, you can add your custom domain in Vercel dashboard:
1. Go to your project settings
2. Add your domain (e.g., yatharthchauhan.com)
3. Vercel will handle SSL and DNS automatically

---
*Generated by Yatri Portfolio System*
`;
  }

  static downloadHTML(htmlContent: string, filename: string = 'portfolio.html') {
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static downloadInstructions(instructions: string, filename: string = 'deployment-instructions.md') {
    const blob = new Blob([instructions], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}
